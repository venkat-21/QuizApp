{"version":3,"sources":["helpers/Questions.js","helpers/Contexts.js","helpers/Chart.js","helpers/Timer.js","components/Quiz.js","components/EndScreen.js","App.js","reportWebVitals.js","index.js"],"names":["Questions","question","option","answer","GameStateContext","createContext","Charts","useContext","score","setGameState","setScore","userName","data","chartType","options","title","width","height","Timer","isPlaying","duration","colors","colorsTime","size","strokeWidth","remainingTime","Quiz","useState","currentQuestion","setCurrentQuestion","optionChosen","setOptionChosen","IsTimer","setIsTimer","gameState","useEffect","setTimeout","length","ans","dis","navigate","type","style","display","justifyContent","className","Grid","container","item","xs","map","opt","index","console","log","onClick","Checkbox","checked","Button","variant","disabled","Stack","spacing","Pagination","count","shape","e","target","textContent","pageNav","Chart","EndScreen","App","setUserName","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAAaA,G,MAAU,CACrB,CACGC,SAAS,4BACTC,OAAO,CACJ,4BACA,6BACA,uCAEHC,OAAO,8BAEV,CACGF,SAAS,mCACTC,OAAO,CACJ,SACA,YACA,UACJ,iCAECC,OAAO,iCAEV,CACGF,SAAS,2DACTC,OAAO,CACJ,OACA,YACA,OACJ,UAECC,OAAO,QAEV,CACGF,SAAS,+DACTC,OAAO,CACJ,OACA,OACA,WAEHC,OAAO,QAEV,CACGF,SAAS,0DACTC,OAAO,CACJ,qBACA,0CACA,mCAEHC,OAAO,2CAEV,CACGF,SAAS,2DACTC,OAAO,CACJ,MACA,WACA,MACJ,eAECC,OAAO,OAEV,CACG,SAAW,4DACX,OAAS,CACN,MACA,WACA,QAEH,OAAS,OAEZ,CACGF,SAAS,qDACTC,OAAO,CACJ,mDACA,kCACA,sDACJ,wDAECC,OAAO,oDAEV,CACGF,SAAS,kDACTC,OAAO,CACJ,IACA,IACA,IACJ,KAECC,OAAO,KAEV,CACGF,SAAS,uDACTC,OAAO,CACJ,iCACA,8BACA,sBAEHC,OAAO,oCC5FCC,EAAmBC,wBAAc,I,gDC6B/BC,EAxBA,WAAO,IAAD,EACmCC,qBAChDH,GADII,EADS,EACTA,MAAiBC,GADR,EACFC,SADE,EACQD,cADR,EACsBE,SAGrCF,EAAa,YACb,IACMG,EAAO,CACX,CAAC,OAAQ,iBACT,CAAC,UAAiB,IAHTJ,EAGa,IACtB,CAAC,QAAQ,IAAW,IAJXA,EAIe,KAK9B,OACE,cAAC,IAAD,CACEK,UAAU,WACVD,KAAMA,EACNE,QAPc,CACZC,MAAO,2BAOTC,MAAO,OACPC,OAAQ,W,QCzBDC,EAAQ,kBACnB,cAAC,IAAD,CACEC,WAAS,EACTC,SAAU,GACVC,OAAQ,CAAC,UAAW,UAAW,UAAW,WAC1CC,WAAY,CAAC,EAAG,EAAG,EAAG,GACtBC,KAAO,GACPC,YAAe,EANjB,SASG,qBAAGC,kBCwIOC,MA1If,WAAiB,IAAD,MACgCC,mBAAS,GADzC,mBACPC,EADO,KACUC,EADV,OAE0BF,mBAAS,IAFnC,mBAEPG,EAFO,KAEOC,EAFP,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAMZ1B,qBAAWH,GADLI,EALM,EAKNA,MAAOE,EALD,EAKCA,SAAUwB,EALX,EAKWA,UAAWzB,EALtB,EAKsBA,aAMpC0B,qBAAU,WACNF,GAAW,GACbG,YAAW,WACLR,EAAkB5B,EAAUqC,QAAsB,YAAZH,GAC1CD,GAAW,GACTJ,EAAmBD,EAAkB,KACtC,OACF,CAACA,IAGJ,IAgCIU,EAAIC,EApBFC,EAAW,SAACC,GAXZzC,EAAU4B,GAAiBzB,SAAW2B,GACxCpB,EAASF,EAAQ,GAYN,UAATiC,EACFZ,EAAmB,GACD,SAATY,EACTZ,GAA4B,OAAT7B,QAAS,IAATA,OAAA,EAAAA,EAAWqC,QAAS,GACrB,SAATI,GACTR,GAAW,GACXJ,EAAmBD,EAAkB,IAEnB,SAATa,GAAqC,GAAlBzC,EAAUqC,QAClCT,GAAiBC,EAAmBD,EAAkB,IAU9D,OAAO5B,EAAUqC,OAAST,EAExB,qCACCI,GAAW,cAAC,EAAD,IACZ,qBAAKU,MAAO,CAAC1B,MAAM,QAAQ2B,QAAQ,OAAOC,eAAgB,cAA1D,SACA,uBAAMC,UAAU,YAAhB,UAA6B,YAAUjB,EAAiB,EAAE,eAE1D,eAACkB,EAAA,EAAD,CAAMC,WAAS,EAACF,UAAU,YAA1B,UACE,cAACC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SAGE,sBAAKJ,UAAU,OAAf,UACE,+BAAKjB,EAAkB,EAAE,KAAzB,UAA4B5B,EAAU4B,UAAtC,aAA4B,EAA4B3B,YACxD,qBAAK4C,UAAU,YAAf,mBACG7C,EAAU4B,UADb,aACG,EAA4B1B,OAAOgD,KAAI,SAACC,EAAKC,GAM5C,OALCd,EAAMa,IAAQrB,EACS,GAApB9B,EAAUqC,SACZE,GAAI,GAELc,QAAQC,IAAIhB,GAEX,yBACEiB,QAAS,WAnEvBxB,EAoE6BoB,IAGfN,UACEM,IAAQrB,EAAe,mBAAqB,UANhD,UASE,cAAC0B,EAAA,EAAD,CACEC,QAASN,IAAQrB,IAEnB,+BAAOqB,MAZT,sBAIsBC,cAehC,eAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIJ,UAAU,UAA7B,UACE,cAACa,EAAA,EAAD,CAAQC,QAAQ,WAAWJ,QAAS,kBAAMf,EAAS,UAAnD,SAA6D,UAG7D,cAACkB,EAAA,EAAD,CACEC,QAAQ,WACRC,SAAUrB,EACVgB,QAAS,kBAAMf,EAAS,SAH1B,SAIC,SAGD,cAACkB,EAAA,EAAD,CAAQC,QAAQ,WAAWJ,QAAS,kBAAMf,EAAS,SAAnD,SAA4D,SAG5D,cAACkB,EAAA,EAAD,CAAQC,QAAQ,WAAWJ,QAAS,kBAAMf,EAAS,SAAnD,SAA4D,YAI9D,cAACM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIJ,UAAU,UAA7B,SACE,cAACgB,EAAA,EAAD,CAAOC,QAAS,EAAhB,SACE,cAACC,EAAA,EAAD,CACEC,MAAO,GACPL,QAAQ,WACRM,MAAM,UACNV,QAAS,SAACW,IA1FJ,SAACA,GACfjC,GAAW,GACXJ,EAAmBqC,EAAEC,OAAOC,YAAc,GAyFhCC,CAAQH,UAKhB,eAACpB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIJ,UAAU,UAA7B,UACE,cAACa,EAAA,EAAD,CAAQC,QAAQ,WAAWJ,QA9Ed,WACbvD,EAAU4B,GAAiBzB,SAAW2B,GACxCpB,EAASF,EAAQ,GAEnBC,EAAa,aA0ET,SAAgD,SAGhD,cAACiD,EAAA,EAAD,CAAQC,QAAQ,WAAhB,SAA2B,WAC3B,cAACD,EAAA,EAAD,CAAQC,QAAQ,WAAhB,SAA2B,oBAK/B,cAACW,EAAD,KCnHWC,EAvBG,WAAO,IAAD,EAC8BhE,qBAClDH,GADaM,GADO,EACdF,MADc,EACPE,UAAUD,EADH,EACGA,aADH,EACiBE,SAQvC,OAEE,sBAAKkC,UAAU,YAAf,UACE,cAACyB,EAAD,IAMA,wBAAQf,QAbQ,WAClB7C,EAAS,GACTD,EAAa,YAWX,SAA8B,qBCOrB+D,MA1Bf,WAAgB,IAAD,EACqB7C,mBAAS,WAD9B,mBACNO,EADM,KACKzB,EADL,OAEmBkB,mBAAS,IAF5B,mBAENhB,EAFM,KAEI8D,EAFJ,OAGa9C,mBAAS,GAHtB,mBAGNnB,EAHM,KAGCE,EAHD,KAKb,OACE,sBAAKmC,UAAU,MAAf,UACE,6BAAI,aACJ,eAACzC,EAAiBsE,SAAlB,CACEC,MAAO,CACLzC,YACAzB,eACAE,WACA8D,cACAjE,QACAE,YAPJ,UAWiB,YAAdwB,GAA2B,cAAC,EAAD,IACb,aAAdA,GAA4B,cAAC,EAAD,WCbtB0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.77e3a93f.chunk.js","sourcesContent":["export const Questions=[  \n  {  \n     question:\"What does HTML stand for?\",\n     option:[  \n        \"Home Tool Markup Language\",\n        \"Hyper Text Markup Language\",\n        \"Hyperlinks and Text Markup Language\"\n     ],\n     answer:\"Hyper Text Markup Language\"\n  },\n  {  \n     question:\"Who is making the Web standards?\",\n     option:[  \n        \"Google\",\n        \"Microsoft\",\n        \"Mozilla\",\n    \"The World Wide Web Consortium\"\n     ],\n     answer:\"The World Wide Web Consortium\"\n  },\n  {  \n     question:\"Choose the correct HTML element for the largest heading:\",\n     option:[  \n        \"<h6>\",\n        \"<heading>\",\n        \"<h1>\",\n    \"<head>\"\n     ],\n     answer:\"<h1>\"\n  },\n  {  \n     question:\"What is the correct HTML element for inserting a line break?\",\n     option:[  \n        \"<br>\",\n        \"<lb>\",\n        \"<break>\"\n     ],\n     answer:\"<br>\"\n  },\n  {  \n     question:\"What is the correct HTML for adding a background color?\",\n     option:[  \n        \"<body bg='yellow'>\",\n        \"<body style='background-color:yellow;'>\",\n        \"<background>yellow</background>\"\n     ],\n     answer:\"<body style='background-color:yellow;'>\"\n  },\n  {  \n     question:\"Choose the correct HTML element to define important text\",\n     option:[  \n        \"<i>\",\n        \"<strong>\",\n        \"<b>\",\n    \"<important>\"\n     ],\n     answer:\"<b>\"\n  },\n  {  \n     \"question\":\"Choose the correct HTML element to define emphasized text\",\n     \"option\":[  \n        \"<i>\",\n        \"<italic>\",\n        \"<em>\"\n     ],\n     \"answer\":\"<i>\"\n  },\n  {  \n     question:\"What is the correct HTML for creating a hyperlink?\",\n     option:[  \n        \"<a href='http://www.w3schools.com'>W3Schools</a>\",\n        \"<a>http://www.w3schools.com</a>\",\n        \"<a url='http://www.w3schools.com'>W3Schools.com</a>\",\n    \"<a name='http://www.w3schools.com'>W3Schools.com</a>\"\n     ],\n     answer:\"<a href='http://www.w3schools.com'>W3Schools</a>\"\n  },\n  {  \n     question:\"Which character is used to indicate an end tag?\",\n     option:[  \n        \"<\",\n        \"*\",\n        \"^\",\n    \"/\"\n     ],\n     answer:\"/\"\n  },\n  {  \n     question:\"How can you open a link in a new tab/browser window?\",\n     option:[  \n        \"<a href='url' target='_blank'>\",\n        \"<a href='url' target='new'>\",\n        \"<a href='url' new>\"\n     ],\n     answer:\"<a href='url' target='_blank'>\"\n  }\n  \n]","import { createContext } from \"react\";\n\nexport const GameStateContext = createContext(\"\");\n","import { Chart } from \"react-google-charts\";\r\nimport { GameStateContext } from \"../helpers/Contexts\";\r\nimport { useContext } from \"react\";\r\nimport { Questions } from \"../helpers/Questions\";\r\n\r\n\r\n\r\nconst Charts = () => {\r\n    const { score, setScore, setGameState, userName } = useContext(\r\n        GameStateContext\r\n      );\r\n      setGameState(\"finished\");\r\n      let value =score;\r\n      const data = [\r\n        [\"Task\", \"Hours per Day\"],\r\n        [\"Correct\", value*100/10],\r\n        [\"Wrong\",100-(value*100/10)]\r\n      ];\r\n    const options = {\r\n        title: \"Toatal Score You Scored\",\r\n      };\r\n  return (\r\n    <Chart\r\n      chartType=\"PieChart\"\r\n      data={data}\r\n      options={options}\r\n      width={\"100%\"}\r\n      height={\"400px\"}\r\n    />\r\n  )\r\n}\r\nexport default Charts","import { CountdownCircleTimer } from 'react-countdown-circle-timer'\r\n\r\nexport const Timer = () => (\r\n  <CountdownCircleTimer\r\n    isPlaying\r\n    duration={60}\r\n    colors={['#004777', '#F7B801', '#A30000', '#A30000']}\r\n    colorsTime={[7, 5, 2, 0]}\r\n    size ={50}\r\n    strokeWidth = {6}\r\n\r\n  >\r\n    {({ remainingTime }) => remainingTime}\r\n  </CountdownCircleTimer>\r\n)\r\n","import \"../App.css\";\nimport { Questions } from \"../helpers/Questions\";\nimport { useState } from \"react\";\n\nimport { useContext, useEffect } from \"react\";\nimport { GameStateContext } from \"../helpers/Contexts\";\nimport { Button, Checkbox, Grid, Pagination, Stack } from \"@mui/material\";\nimport Charts from \"../helpers/Chart\";\nimport { Timer } from \"../helpers/Timer\";\n\nfunction Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [optionChosen, setOptionChosen] = useState(\"\");\n  const [IsTimer, setIsTimer] = useState(false);\n\n  const { score, setScore, gameState, setGameState } =\n    useContext(GameStateContext);\n\n  const chooseOption = (option) => {\n    setOptionChosen(option);\n  };\n  useEffect(() => {\n      setIsTimer(true);\n    setTimeout(() => {\n      if (currentQuestion < Questions.length && gameState !=\"finished\")\n      setIsTimer(false);\n        setCurrentQuestion(currentQuestion + 1);\n    }, 60000);\n  }, [currentQuestion]);\n\n\n  const nextQuestion = () => {\n    if (Questions[currentQuestion].answer === optionChosen) {\n      setScore(score + 1);\n    }\n    // setCurrentQuestion(currentQuestion + 1);\n  };\n\n  const pageNav = (e) => {\n    setIsTimer(false);\n    setCurrentQuestion(e.target.textContent - 1);\n  };\n\n  const navigate = (type) => {\n    nextQuestion();\n    if (type === \"first\") {\n      setCurrentQuestion(0);\n    } else if (type === \"last\") {\n      setCurrentQuestion(Questions?.length - 1);\n    } else if (type === \"next\") {\n      setIsTimer(false);\n      setCurrentQuestion(currentQuestion + 1);\n\n    } else if (type === \"prev\" && Questions.length==1) {\n      if (currentQuestion) setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n  const finishQuiz = () => {\n    if (Questions[currentQuestion].answer === optionChosen) {\n      setScore(score + 1);\n    }\n    setGameState(\"finished\");\n  };\n  let ans,dis ;\n  return Questions.length > currentQuestion ? (\n\n    <>\n    {IsTimer && <Timer />}\n    <div style={{width:\"800px\",display:\"flex\",justifyContent: \"flex-start\"}}>\n    <span className=\"QuizLabel\" >Question {currentQuestion +1} of 10 </span>\n    </div>\n    <Grid container className=\"container\">\n      <Grid item xs={12}>\n        \n      \n        <div className=\"Quiz\">\n          <h3>{currentQuestion + 1}. {Questions[currentQuestion]?.question}</h3>\n          <div className=\"questions\">\n            {Questions[currentQuestion]?.option.map((opt, index) => {\n               ans = opt === optionChosen ? true : false;\n               if(Questions.length == 1){\n                dis=true\n               }\n               console.log(ans);\n              return (\n                <button\n                  onClick={() => {\n                    chooseOption(opt);\n                  }}\n                  key={`list-option-${index}`}\n                  className={\n                    opt === optionChosen ? \"selected options\" : \"options\"\n                  }\n                >\n                  <Checkbox\n                    checked={opt === optionChosen ? true : false}\n                  ></Checkbox>\n                  <span>{opt}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </Grid>\n      <Grid item xs={12} className=\"btn-grp\">\n        <Button variant=\"outlined\" onClick={() => navigate(\"first\")}>\n          First\n        </Button>\n        <Button\n          variant=\"outlined\"\n          disabled={dis}\n          onClick={() => navigate(\"prev\")}\n        >\n          Prev\n        </Button>\n        <Button variant=\"outlined\" onClick={() => navigate(\"next\")}>\n          Next\n        </Button>\n        <Button variant=\"outlined\" onClick={() => navigate(\"last\")}>\n          Last\n        </Button>\n      </Grid>\n      <Grid item xs={12} className=\"btn-grp\">\n        <Stack spacing={2}>\n          <Pagination\n            count={10}\n            variant=\"outlined\"\n            shape=\"rounded\"\n            onClick={(e) => {\n              pageNav(e);\n            }}\n          />\n        </Stack>\n      </Grid>\n      <Grid item xs={12} className=\"btn-grp\">\n        <Button variant=\"outlined\" onClick={finishQuiz}>\n          Quiz\n        </Button>\n        <Button variant=\"outlined\">Review</Button>\n        <Button variant=\"outlined\">Submit</Button>\n      </Grid>\n    </Grid>\n    </>\n  ) : (\n    <Charts />\n  );\n}\n\nexport default Quiz;\n","import React from \"react\";\nimport \"../App.css\";\nimport { useContext } from \"react\";\nimport { GameStateContext } from \"../helpers/Contexts\";\nimport { Questions } from \"../helpers/Questions\";\nimport Charts from \"../helpers/Chart\";\nconst EndScreen = () => {\n  const { score, setScore, setGameState, userName } = useContext(\n    GameStateContext\n  );\n\n  const restartQuiz = () => {\n    setScore(0);\n    setGameState(\"playing\");\n  };\n  return (\n    \n    <div className=\"EndScreen\">\n      <Charts />\n      {/* <h1>Quiz Finished</h1>\n      <h3>{userName}</h3>\n      <h1>\n        {score} / {Questions.length}\n      </h1> */}\n      <button onClick={restartQuiz}>Restart Quiz</button>\n    </div>\n  );\n};\n\nexport default EndScreen;\n","import \"./App.css\";\nimport Quiz from \"./components/Quiz\";\nimport EndScreen from \"./components/EndScreen\";\nimport { useState } from \"react\";\nimport { GameStateContext } from \"./helpers/Contexts\";\nfunction App() {\n  const [gameState, setGameState] = useState(\"playing\");\n  const [userName, setUserName] = useState(\"\");\n  const [score, setScore] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <h1>Quiz App</h1>\n      <GameStateContext.Provider\n        value={{\n          gameState,\n          setGameState,\n          userName,\n          setUserName,\n          score,\n          setScore,\n        }}\n      >\n        {/* {gameState === \"menu\" && <Menu />} */}\n        {gameState === \"playing\" && <Quiz />}\n        {gameState === \"finished\" && <EndScreen />}\n      </GameStateContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}